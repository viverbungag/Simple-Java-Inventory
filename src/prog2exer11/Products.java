/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package prog2exer11;


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Viver
 */
public class Products extends javax.swing.JFrame {

    /**
     * Creates new form Products
     */
    
    static String[][] ProdArr = new String[10][6];
    static String [][][] StockArr = new String[10][10][8];
    int ID = 1;
    int[] StockIDS = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    static int indxRowT2;
    static int indxRowT3;
    long millis=System.currentTimeMillis();  
    java.sql.Date Currdate=new java.sql.Date(millis);
    
    public Products() {
        initComponents();
        Prodreadcsv();
        Stockreadcsv();
        Costreadcsv();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        ProdId = new javax.swing.JTextField();
        ProdType = new javax.swing.JTextField();
        ProdDesc = new javax.swing.JTextField();
        ProdSupp = new javax.swing.JTextField();
        ProdQuant = new javax.swing.JTextField();
        ProdTot = new javax.swing.JTextField();
        ProdDate = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        ProdPlus = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        ProdLabor = new javax.swing.JTextField();
        ProdOverhead = new javax.swing.JTextField();
        ProdProfit = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Address", "Contact#", "Email", "Birthday", "Gender"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("Product Id");

        jLabel2.setText("Product Type");

        jLabel3.setText("Product Description");

        jLabel4.setText("Supplier");

        jLabel6.setText("Quantity");

        jLabel7.setText("Total Cost");

        jLabel8.setText("Date Received");

        ProdId.setEditable(false);
        ProdId.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        ProdId.setText("1");
        ProdId.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        ProdId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdIdActionPerformed(evt);
            }
        });

        ProdType.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ProdType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdTypeActionPerformed(evt);
            }
        });

        ProdDesc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ProdDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdDescActionPerformed(evt);
            }
        });

        ProdSupp.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ProdSupp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdSuppActionPerformed(evt);
            }
        });

        ProdQuant.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ProdQuant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdQuantActionPerformed(evt);
            }
        });

        ProdTot.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ProdTot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdTotActionPerformed(evt);
            }
        });

        ProdDate.setEditable(false);
        ProdDate.setForeground(new java.awt.Color(153, 153, 153));
        ProdDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ProdDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdDateActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel10.setText("New Product Stock-In");

        jButton1.setText("New Product");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Stock IN");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Product Type", "Product Desc.", "Supplier", "Total Quantity", "Orders"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setMinWidth(40);
            jTable2.getColumnModel().getColumn(0).setMaxWidth(40);
        }

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Product Type", "Product Desc.", "Supplier", "Quantity", "Cost", "DateReceived", "Orders"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(0).setMinWidth(40);
            jTable3.getColumnModel().getColumn(0).setMaxWidth(40);
        }

        ProdPlus.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ProdPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdPlusActionPerformed(evt);
            }
        });

        jLabel5.setText("+");

        ProdLabor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ProdLabor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdLaborActionPerformed(evt);
            }
        });
        ProdLabor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ProdLaborKeyReleased(evt);
            }
        });

        ProdOverhead.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ProdOverhead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdOverheadActionPerformed(evt);
            }
        });
        ProdOverhead.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ProdOverheadKeyReleased(evt);
            }
        });

        ProdProfit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ProdProfit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdProfitActionPerformed(evt);
            }
        });
        ProdProfit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ProdProfitKeyReleased(evt);
            }
        });

        jLabel9.setText("Labor Cost");

        jLabel11.setText("Overhead Cost");

        jLabel12.setText("Desired Profit");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 31, Short.MAX_VALUE)
                                .addComponent(jLabel10))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ProdId, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ProdTot))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ProdQuant, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ProdPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ProdSupp))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ProdDesc))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ProdDate))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ProdType))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jButton1)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(75, 75, 75))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(18, 18, 18)
                                .addComponent(ProdOverhead, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(ProdLabor, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(18, 18, 18)
                                .addComponent(ProdProfit, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 644, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 644, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(ProdId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(ProdType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(ProdDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(ProdSupp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(ProdQuant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ProdPlus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(ProdTot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(ProdDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ProdLabor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ProdOverhead, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ProdProfit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ProdIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProdIdActionPerformed

    private void ProdTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProdTypeActionPerformed

    private void ProdDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdDescActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProdDescActionPerformed

    private void ProdSuppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdSuppActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProdSuppActionPerformed

    private void ProdQuantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdQuantActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProdQuantActionPerformed

    private void ProdTotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdTotActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProdTotActionPerformed

    private void ProdDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProdDateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        
        if (ProdType.getText().length() > 0 && ProdDesc.getText().length() > 0 && ProdSupp.getText().length() > 0 && ProdQuant.getText().length() > 0 && ProdTot.getText().length() > 0){
            MsgBox("Product Saved", "Saved!");
            ProdId.setText(Integer.toString(ID+1));
            ProdArr[ID-1] = getArray1();
            String[] tempArr = {
                Integer.toString(ID),
                ProdType.getText(),
                ProdDesc.getText(),
                ProdSupp.getText(),
                ProdQuant.getText(),
                ProdTot.getText(),
                ProdDate.getText(),
                "0"
            };
            StockArr[ID-1][StockIDS[ID-1]] = tempArr;
            makeTable1(ProdArr);
            makeTable2(StockArr[ID]);
            
            StockIDS[ID-1]++;
            ID++;
            Prodwritecsv();
            Stockwritecsv();
        }else{
            MsgBox("There are missing Inputs", "Error!");
        }
        
                
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ProdPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdPlusActionPerformed
        
    }//GEN-LAST:event_ProdPlusActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        if (ProdPlus.getText().length() > 0 && ProdType.getText().length() > 0 && ProdDesc.getText().length() > 0 && ProdSupp.getText().length() > 0 && ProdQuant.getText().length() > 0 && ProdTot.getText().length() > 0 && ProdDate.getText().length() > 0){
            if (jTable2.getSelectionModel().isSelectionEmpty()){
                MsgBox("Please Select a row from the first Table", "Message!");
            }else{
                StockArr[indxRowT2][StockIDS[indxRowT2]] = getArray2();
                makeTable2(StockArr[indxRowT2]);
                StockIDS[indxRowT2] += 1;
//                tblmodel3.setRowCount(0);
                ProdArr[indxRowT2][4] = Integer.toString(Integer.parseInt(ProdArr[indxRowT2][4]) + Integer.parseInt(ProdPlus.getText()));
                makeTable1(ProdArr);
                Prodwritecsv();
                Stockwritecsv();
            }            
        }else{
            MsgBox("There are missing Inputs", "Error!");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        int[] selectRow = jTable2.getSelectedRows();
        indxRowT2 = jTable2.getSelectedRow();
        ProdId.setText(jTable2.getValueAt(selectRow[0], 0).toString());
        ProdType.setText(jTable2.getValueAt(selectRow[0], 1).toString());
        ProdDesc.setText(jTable2.getValueAt(selectRow[0], 2).toString());
        ProdSupp.setText(jTable2.getValueAt(selectRow[0], 3).toString());
        ProdQuant.setText(jTable2.getValueAt(selectRow[0], 4).toString());
        ProdTot.setText("");
        makeTable2(StockArr[indxRowT2]);
//        for (int x = 0; x < StockArr.length;x++){
//            tblmodel3.addRow(StockArr[selectRow][x]);
//            
//        }
    }//GEN-LAST:event_jTable2MouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        String realDate = Currdate.toString().substring(5, 7) + "/" + Currdate.toString().substring(8, 10) + "/" + Currdate.toString().substring(0, 4);
        ProdDate.setText(realDate);
    }//GEN-LAST:event_formWindowOpened

    private void ProdLaborActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdLaborActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProdLaborActionPerformed

    private void ProdOverheadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdOverheadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProdOverheadActionPerformed

    private void ProdProfitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdProfitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProdProfitActionPerformed

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        // TODO add your handling code here:
        indxRowT3 = jTable3.getSelectedRow();
    }//GEN-LAST:event_jTable3MouseClicked

    private void ProdLaborKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ProdLaborKeyReleased
        // TODO add your handling code here:
        Costwritecsv();
    }//GEN-LAST:event_ProdLaborKeyReleased

    private void ProdOverheadKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ProdOverheadKeyReleased
        // TODO add your handling code here:
        Costwritecsv();
    }//GEN-LAST:event_ProdOverheadKeyReleased

    private void ProdProfitKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ProdProfitKeyReleased
        // TODO add your handling code here:
        Costwritecsv();
    }//GEN-LAST:event_ProdProfitKeyReleased
    public String[] getArray1(){
        String[] tempArr = {
            Integer.toString(ID),
            ProdType.getText(),
            ProdDesc.getText(),
            ProdSupp.getText(),
            ProdQuant.getText(),
            "0"         
        };        
        return tempArr;
    }
    
    
    public String[] getArray2(){
        String[] tempArr = {
            Integer.toString(indxRowT2+1),
            ProdType.getText(),
            ProdDesc.getText(),
            ProdSupp.getText(),
            ProdPlus.getText(),
            ProdTot.getText(),
            ProdDate.getText(),
            "0"
        };
        return tempArr;
    }
    
    
    public static void makeTable1(String[][] Arr){
        DefaultTableModel tblmodel2 = (DefaultTableModel) jTable2.getModel();
        tblmodel2.setRowCount(0);
        for (String[] x: Arr){
            if (x[0] != null){
                tblmodel2.addRow(x);
            }
        }
    }
    
    public static void makeTable2(String[][] Arr){
        DefaultTableModel tblmodel3 = (DefaultTableModel) jTable3.getModel();
        tblmodel3.setRowCount(0);
        for (String[] x: Arr){
            if (x[0] != null){
                tblmodel3.addRow(x);
            }
        }
    }
    
     
    
    public void MsgBox(String infoMessage, String titleBar){
        JOptionPane.showMessageDialog(null, infoMessage, titleBar, JOptionPane.INFORMATION_MESSAGE);
    }
    
    public void AddOrder(){
//        System.out.println("ProdArr = " + ProdArr[indxRowT2][5]);
//        System.out.println("StockArr = " + StockArr[indxRowT2][indxRowT3][7]);
        
        ProdArr[indxRowT2][5] = Integer.toString(Integer.parseInt(ProdArr[indxRowT2][5])+1);
        StockArr[indxRowT2][indxRowT3][7] = Integer.toString(Integer.parseInt(StockArr[indxRowT2][indxRowT3][7])+1);
    }
    
    public String[] GetProdArr(){
//        System.out.println("indxRowTr: " + indxRowT3);
//        String[] PassArr = new String[3];
        String [] PassArr = {null, null, null};
//        int checkQuant = 0;
//        System.out.println(ProdLabor.getText());
        if (jTable2.getSelectionModel().isSelectionEmpty()){
            MsgBox("Please select a row from The Products Table", "Message!");
        }else if (jTable3.getSelectionModel().isSelectionEmpty()){
            MsgBox("Please select a row from The Stock in Table", "Message!");
        }else{       
            if (ProdLabor.getText().length() > 0){
                if (ProdOverhead.getText().length() > 0){
                    if (ProdProfit.getText().length() > 0){
                        
//                        while (true) {
                        if ("0".equals(ProdArr[indxRowT2][4])){
                                MsgBox("There are no stocks for this product", "Error!");
                                return PassArr;
                        }
//                            if ("0".equals(StockArr[indxRowT2][checkQuant][4])){
//                                checkQuant++;
//                            }
//                            else{
                        PassArr[0] = StockArr[indxRowT2][indxRowT3][1];
                        PassArr[1] = StockArr[indxRowT2][indxRowT3][2];
                        int PerItem = Integer.parseInt(StockArr[indxRowT2][indxRowT3][5]) / (Integer.parseInt(StockArr[indxRowT2][indxRowT3][4]) + Integer.parseInt(StockArr[indxRowT2][indxRowT3][7]));
                        PassArr[2] = Integer.toString(PerItem + Integer.parseInt(ProdLabor.getText()) + Integer.parseInt(ProdOverhead.getText()) + Integer.parseInt(ProdProfit.getText()));
//                            StockArr[indxRowT2][indxRowT3][5] = Integer.toString(Integer.parseInt(StockArr[indxRowT2][indxRowT3][5]) - PerItem);
                        StockArr[indxRowT2][indxRowT3][4] = Integer.toString(Integer.parseInt(StockArr[indxRowT2][indxRowT3][4])-1);
                        ProdArr[indxRowT2][4] = Integer.toString(Integer.parseInt(ProdArr[indxRowT2][4])-1);
                        AddOrder();
                        makeTable1(ProdArr);
                        makeTable2(StockArr[indxRowT2]);
                        Prodwritecsv();
                        Stockwritecsv();
//                        return PassArr;
//                            }
//                        }
                    }else{
                        MsgBox("Please input your Desired Profit", "Not Saved!");
                    }
                }else{
                    MsgBox("Please input Overhead Cost", "Not Saved!");
                }        
            }else{
                MsgBox("Please input Labor Cost", "Not Saved!");
            }

        } 
        return PassArr; 
    }
    public void Prodwritecsv(){
        try{
            BufferedWriter br = new BufferedWriter(new FileWriter("products.csv"));
            StringBuilder sb = new StringBuilder();
            for (int x = 0; x < ProdArr.length; x++){
                for (int y = 0; y < ProdArr[0].length; y++){
                    if (ProdArr[x][y] != null){
                        sb.append(ProdArr[x][y]);
                        sb.append(",");
                    }
                }
                sb.append("-");
            
            }
            br.write(sb.toString());
            br.close();
        } 
        catch(Exception ex){
            
        }
    } 
    public void Prodreadcsv(){
        String[] fromfile = {};
        try{
            BufferedReader br = new BufferedReader(new FileReader("products.csv"));
            String line;
            
            while ((line = br.readLine()) != null){
                fromfile = line.split("-");
            }
//            System.out.println("fromfile = " + Arrays.deepToString(fromfile));
            for (int x = 0; x < fromfile.length; x++){
                ProdArr[x] = fromfile[x].split(",");
            }
//            System.out.println("ProdArr = " + Arrays.deepToString(ProdArr));
                
            makeTable1(ProdArr);
        }
        catch(Exception ex){
            
        }
    }
    public void Stockwritecsv(){
        try{
//            System.out.println(Arrays.deepToString(StockArr));
            BufferedWriter br = new BufferedWriter(new FileWriter("stocks.csv"));
            StringBuilder sb = new StringBuilder();
//            System.out.println("StockArr: " + Arrays.deepToString(StockArr));
            for (int x = 0; x < StockArr.length; x++){
                for (int y = 0; y < StockArr[0].length; y++){
                    for (int z = 0; z < 8; z++){
                        if (StockArr[x][y][z] != null){
//                            System.out.println(StockArr[x][y][z]);
                            sb.append(StockArr[x][y][z]);
                            sb.append(",");
                        }
                    }
                    sb.append("-");  
                }
                sb.append("_");
            }
            
//            System.out.println(sb.toString());
            br.write(sb.toString());
            br.close();
        } 
        catch(Exception ex){
//            System.out.println(ex);
        }
    } 
    public void Stockreadcsv(){
        String[] fromfile = {};
        try{
            BufferedReader br = new BufferedReader(new FileReader("stocks.csv"));
            String line;
//            System.out.println(br.readLine());
            
            while ((line = br.readLine()) != null){
//                System.out.println(Arrays.toString(br.readLine().split(",")));
                fromfile = line.split("_"); 
//                System.out.println(fromfile.length);
            }
            
//            System.out.println("fromfile = " + Arrays.toString(fromfile));
            String[] Temparr = new String[10];
            for (int x = 0; x < fromfile.length; x++){
                if (!"-".equals(fromfile[x].substring(0, 1))){
                    ID++;
                }
                Temparr = fromfile[x].split("-");
//                System.out.println("Temparr = " + Arrays.toString(Temparr));
                for (int y = 0; y < Temparr.length; y++){
                    if (!",".equals(Temparr[y].substring(0, 1))){
                    StockIDS[x]++;
                    }
//                    System.out.println(Arrays.deepToString(Temparr));
                    StockArr[x][y] = Temparr[y].split(",");
                }
            }
//            System.out.println(ID);
//            System.out.println(Arrays.toString(StockIDS));
//            int element = 0;
//            int hyphen = 0;
//            int stick = 0;
//            for (int x = 0; x < fromfile.length; x++){
//                if (fromfile[x].equals("-")){
//                    element = 0;
//                    hyphen++;
//                }
//                else if (fromfile[x].equals("|")){
//                    element = 0;
//                    hyphen = 0;
//                    stick++;
//                }
//                else{
//                    StockArr[stick][hyphen][element] = fromfile[x];
//                }
//                element++;
//            }
//            System.out.println(Arrays.deepToString(StockArr));
            makeTable2(StockArr[0]);
            jTable2.setRowSelectionInterval(0, 0);
        }
        catch(Exception ex){
            System.out.println(ex);
        }
    }
    
     public void Costwritecsv(){
        try{
//            System.out.println(Arrays.deepToString(StockArr));
            BufferedWriter br = new BufferedWriter(new FileWriter("cost.csv"));
            StringBuilder sb = new StringBuilder();
            sb.append(ProdLabor.getText() + ",");
            sb.append(ProdOverhead.getText() + ",");
            sb.append(ProdProfit.getText());
            
            br.write(sb.toString());
            br.close();
        } 
        catch(Exception ex){
//            System.out.println(ex);
        }
    } 
    public void Costreadcsv(){
        String[] fromfile = {};
        try{
            BufferedReader br = new BufferedReader(new FileReader("cost.csv"));
            String line;
//            System.out.println(br.readLine());
            
            while ((line = br.readLine()) != null){
//                System.out.println(Arrays.toString(br.readLine().split(",")));
                fromfile = line.split(",");
            }
            ProdLabor.setText(fromfile[0]);
            ProdOverhead.setText(fromfile[1]);
            ProdProfit.setText(fromfile[2]);
        }
        catch(Exception ex){
//            System.out.println(ex);
        }
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Products().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ProdDate;
    private javax.swing.JTextField ProdDesc;
    private javax.swing.JTextField ProdId;
    public static javax.swing.JTextField ProdLabor;
    public static javax.swing.JTextField ProdOverhead;
    private javax.swing.JTextField ProdPlus;
    public static javax.swing.JTextField ProdProfit;
    private javax.swing.JTextField ProdQuant;
    private javax.swing.JTextField ProdSupp;
    private javax.swing.JTextField ProdTot;
    private javax.swing.JTextField ProdType;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    public static javax.swing.JTable jTable2;
    public static javax.swing.JTable jTable3;
    // End of variables declaration//GEN-END:variables
}
