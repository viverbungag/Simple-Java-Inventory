/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package prog2exer11;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.GraphicsConfiguration;
import java.awt.image.ImageConsumer;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.Arrays;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
/**
 *
 * @author Viver
 */
public class CostumerForm extends javax.swing.JFrame {

    /**
     * Creates new form CostumerForm
     */
    String[][] costumer = new String[1][6];
    ArrayList<Integer> deleted = new ArrayList<Integer>();
    ArrayList<String[]> Cust = new ArrayList<String[]>();
    int indxRow;
    int idnum = 1;
    Products ProdClass = new Products();
//    String[][][] CustProd = new String [10][10][7];
    ArrayList<String[][]> CustProd = new ArrayList<String[][]>();
//    String[][] Cust = new String [10][7];
    int[] CustProdID = new int[10];
//    String[][][] checkSame = new String[10][10][2];
    int[] CustProdInvoice = {4090, 4091, 4092, 4093, 4094, 4095, 4096, 4097, 4098, 4100};
    long millis=System.currentTimeMillis();  
    java.sql.Date date=new java.sql.Date(millis);
    String Currdate = date.toString().substring(5, 7) + "/" + date.toString().substring(8, 10) + "/" + date.toString().substring(0, 4);
    
    public CostumerForm() {
        initComponents();
        Custreadcsv();
        CustProdreadcsv();
        Deletedreadcsv();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        add = new javax.swing.JTextField();
        num = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        eLabel = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        bLabel = new javax.swing.JLabel();
        bday = new javax.swing.JTextField();
        gender = new javax.swing.JComboBox();
        nLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFocusTraversalPolicyProvider(true);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("Costumer ID");

        id.setEditable(false);
        id.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        id.setText("1");
        id.setBorder(null);
        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setText("Costumer Recording System");

        jLabel3.setText("Costumer Name");

        jLabel4.setText("Costumer Address");

        jLabel5.setText("Costumer Contact#");

        jLabel6.setText("Costumer Email");

        jLabel7.setText("Costumer Birthday");

        jLabel8.setText("Costumer Gender");

        name.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });
        name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameKeyReleased(evt);
            }
        });

        add.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        num.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        num.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numActionPerformed(evt);
            }
        });

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Update");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        eLabel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        eLabel.setText("Format: Example@gmail.com");

        email.setToolTipText("");
        email.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailActionPerformed(evt);
            }
        });
        email.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                emailKeyReleased(evt);
            }
        });

        bLabel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        bLabel.setText("MM/DD/YYYY");

        bday.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bdayActionPerformed(evt);
            }
        });
        bday.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                bdayKeyReleased(evt);
            }
        });

        gender.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Male", "Female" }));
        gender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genderActionPerformed(evt);
            }
        });

        nLabel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        nLabel.setText("Format: LastName, FirstName");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 371, Short.MAX_VALUE)
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Address", "Contact#", "Email", "Birthday", "Gender"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(70);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(90);
        }

        jButton4.setText("Add Order");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Invoice No.", "Prod ID", "Product Type", "Product Desc", "Quantity", "Unit Price", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable4MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable4);
        if (jTable4.getColumnModel().getColumnCount() > 0) {
            jTable4.getColumnModel().getColumn(0).setPreferredWidth(70);
            jTable4.getColumnModel().getColumn(1).setPreferredWidth(50);
            jTable4.getColumnModel().getColumn(2).setPreferredWidth(200);
            jTable4.getColumnModel().getColumn(3).setPreferredWidth(200);
            jTable4.getColumnModel().getColumn(4).setPreferredWidth(80);
            jTable4.getColumnModel().getColumn(5).setPreferredWidth(100);
            jTable4.getColumnModel().getColumn(6).setPreferredWidth(90);
        }

        jButton5.setText("Print Invoice");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setText("Products");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Orders");
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(89, 89, 89)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, 0)
                                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(6, 6, 6)
                                                .addComponent(num, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addGap(6, 6, 6)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(nLabel)))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(14, 14, 14)
                                        .addComponent(eLabel))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(gender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(12, 12, 12)
                                                .addComponent(jButton1)
                                                .addGap(31, 31, 31)
                                                .addComponent(jButton2)))
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton3))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(bLabel)
                                            .addComponent(bday, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jLabel2)))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 793, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(224, 224, 224)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 791, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton4)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton5)
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(27, 27, 27))))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addComponent(nLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(eLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addComponent(bLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(gender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton3))
                        .addContainerGap(422, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idActionPerformed

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addActionPerformed

    private void emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailActionPerformed

    private void numActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numActionPerformed

    private void bdayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bdayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bdayActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        Products form = new Products();
        form.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void genderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genderActionPerformed

    private void emailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailKeyReleased
        // TODO add your handling code here:
        
        for (int x = 0; x < email.getText().length(); x++){
            if (Character.isLetterOrDigit(email.getText().charAt(0))){
                if (email.getText().contains("@") && x > 3){
                    if (email.getText().contains(".com") && x > 5){
                        eLabel.setForeground(Color.green.darker());
                        eLabel.setText("Correct Format");

                    }else{
                        eLabel.setForeground(Color.red);
                        eLabel.setText("Wrong Email Format (abc@gmail.com)");
                    }
                }else{
                    eLabel.setForeground(Color.red);
                    eLabel.setText("Wrong Email Format (abc@gmail.com)");
                }
            }else{
                eLabel.setForeground(Color.red);
                eLabel.setText("Wrong Email Format (abc@gmail.com)");
            }
        }
        if (email.getText().length() == 0){
            eLabel.setForeground(Color.black.brighter());
            eLabel.setText("Format: Example@gmail.com");
        }
    }//GEN-LAST:event_emailKeyReleased

    private void bdayKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bdayKeyReleased
        // TODO add your handling code here:
        long millis=System.currentTimeMillis();  
        java.sql.Date date=new java.sql.Date(millis);
        int len = bday.getText().length();
        if (len < 11){
            if (len > 1){
                if (Character.isDigit(bday.getText().charAt(0))&& Character.isDigit(bday.getText().charAt(1))){
                    if(Integer.parseInt(bday.getText().substring(0, 2)) < 13 && Integer.parseInt(bday.getText().substring(0, 2)) > 0){
                        bLabel.setForeground(Color.yellow.darker());
                        bLabel.setText("Correct Format so Far (Keep Going)");
                        if (len > 2){
                            if(bday.getText().substring(2, 3).equals("/")){
                                bLabel.setForeground(Color.yellow.darker());
                                bLabel.setText("Correct Format so Far (Keep Going)");
                                if (len > 4){
                                    if (Character.isDigit(bday.getText().charAt(3))&& Character.isDigit(bday.getText().charAt(4))){
                                        if(Integer.parseInt(bday.getText().substring(3, 5)) < 32 && Integer.parseInt(bday.getText().substring(3, 5)) > 0){
                                            bLabel.setForeground(Color.yellow.darker());
                                            bLabel.setText("Correct Format so Far (Keep Going)");
                                            if (len > 5){
                                                if(bday.getText().substring(5, 6).equals("/")){
                                                    bLabel.setForeground(Color.yellow.darker());
                                                    bLabel.setText("Correct Format so Far (Keep Going)");
                                                    if (len > 9){
                                                        if (Character.isDigit(bday.getText().charAt(6))&& Character.isDigit(bday.getText().charAt(7)) && Character.isDigit(bday.getText().charAt(8)) && Character.isDigit(bday.getText().charAt(9))){
                                                            if(Integer.parseInt(bday.getText().substring(6, 10)) <= Integer.parseInt(date.toString().substring(0,4))-17){
                                                                if (Integer.parseInt(bday.getText().substring(6, 10)) == Integer.parseInt(date.toString().substring(0,4))-17){
                                                                    if (Integer.parseInt(bday.getText().substring(0, 2)) <= Integer.parseInt(date.toString().substring(5,7))){
                                                                        if (Integer.parseInt(bday.getText().substring(3, 5)) <= Integer.parseInt(date.toString().substring(8,10))){
                                                                           if (len == 10){
                                                                                bLabel.setForeground(Color.green.darker());
                                                                                bLabel.setText("Correct Overall Format");  
                                                                            }
                                                                            else{
                                                                                bLabel.setForeground(Color.red);
                                                                                bLabel.setText("There is something wrong with the Format");
                                                                            }
                                                                        }else{
                                                                            bLabel.setForeground(Color.red);
                                                                            bLabel.setText("You must be 18 or above"); 
                                                                        }

                                                                    }else{                                                                
                                                                        bLabel.setForeground(Color.red);
                                                                        bLabel.setText("You must be 18 or above"); 
                                                                    }
                                                                }else{
                                                                    if (len == 10){
                                                                      bLabel.setForeground(Color.green.darker());
                                                                      bLabel.setText("Correct Overall Format");  
                                                                    }
                                                                    else{
                                                                        bLabel.setForeground(Color.red);
                                                                        bLabel.setText("There is something wrong with the Format");
                                                                    }                                                               
                                                                }
                                                            }
                                                            else{
                                                                bLabel.setForeground(Color.red);
                                                                bLabel.setText("You must be 18 or above");          
                                                            }
                                                        }else{
                                                            bLabel.setForeground(Color.red);
                                                            bLabel.setText("You can only input numbers");
                                                        }
                                                    }
                                                }else{
                                                    bLabel.setForeground(Color.red);
                                                    bLabel.setText("There is something wrong with the Format");
                                                }
                                            }
                                        }else{
                                            bLabel.setForeground(Color.red);
                                            bLabel.setText("There is something wrong with the Format");
                                        }
                                    }else{
                                        bLabel.setForeground(Color.red);
                                        bLabel.setText("You can only input numbers");
                                    }
                                }
                            }else{
                                bLabel.setForeground(Color.red);
                                bLabel.setText("There is something wrong with the Format");
                            }
                        }
                    }else{
                        bLabel.setForeground(Color.red);
                        bLabel.setText("There is something wrong with the Format");
                    }
                }else{
                    bLabel.setForeground(Color.red);
                    bLabel.setText("You can only input numbers");
                }
            }
        }else{
            bLabel.setForeground(Color.red);
            bLabel.setText("There is something wrong with the Format");
        }    
        if (len == 0){
            bLabel.setForeground(Color.black.brighter());
            bLabel.setText("MM/DD/YYYY");
        }
    }//GEN-LAST:event_bdayKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (eLabel.getText().equals("Correct Format") && bLabel.getText().equals("Correct Overall Format") && name.getText().length() > 0 && add.getText().length() > 0 && num.getText().length() > 0 && nLabel.getText().equals("Correct Format")){
            MsgBox("Successfully Saved", "Message!");
        if (deleted.isEmpty()){
            idnum = Cust.size()+1;
            id.setText(Integer.toString(idnum+1));
            String[] item = {Integer.toString(idnum), name.getText(), add.getText(), num.getText(),email.getText(),bday.getText(), gender.getSelectedItem().toString()};
            DefaultTableModel tblmodel = (DefaultTableModel) jTable1.getModel();
            tblmodel.addRow(item);
            Cust.add(item);
//            idnum++;    
        }else{
            if (deleted.size() > 1){
                id.setText(Integer.toString(deleted.get(1)));
            }else{
              id.setText(Integer.toString(idnum));  
            } 
            String[] item = {Integer.toString(deleted.get(0)), name.getText(), add.getText(), num.getText(),email.getText(),bday.getText(), gender.getSelectedItem().toString()};
            Cust.add(item);
            DefaultTableModel tblmodel = (DefaultTableModel) jTable1.getModel();
            tblmodel.addRow(item);
            deleted.remove(0);
        }
        
        CustProd.add(new String[10][8]);
        Deletedwritecsv();
        Custwritecsv();
            
//            costumer[idnum] = item;
//            costumer = Arrays.copyOf(costumer, costumer.length + 1);
        }else{
            MsgBox("There are Wrong inputs\nPlease Try Again", "Message!");
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int[] selectRow = jTable1.getSelectedRows();
        indxRow = jTable1.getSelectedRow();
        id.setText(jTable1.getValueAt(selectRow[0], 0).toString());
        name.setText(jTable1.getValueAt(selectRow[0], 1).toString());
        add.setText(jTable1.getValueAt(selectRow[0], 2).toString());
        num.setText(jTable1.getValueAt(selectRow[0], 3).toString());
        email.setText(jTable1.getValueAt(selectRow[0], 4).toString());
        bday.setText(jTable1.getValueAt(selectRow[0], 5).toString());
        gender.setSelectedItem(jTable1.getValueAt(selectRow[0], 6).toString());
        if (!CustProd.isEmpty()){
            String[][][] convert = new String[CustProd.size()][10][7];
            CustProd.toArray(convert);
            makeCustProdTable(convert[indxRow]);
        }

    }//GEN-LAST:event_jTable1MouseClicked

    private void nameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameKeyReleased
        if (name.getText().indexOf(',') < 1){
            nLabel.setText("Enter this Format: LastName, FirstName");
            nLabel.setForeground(Color.red);
        }
        else{
            nLabel.setText("Correct Format");
            nLabel.setForeground(Color.green.darker());
        }
    }//GEN-LAST:event_nameKeyReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (jTable1.getSelectionModel().isSelectionEmpty()){
            MsgBox("Please Select a row", "Message!");
        }else{           
            if (eLabel.getText().equals("Correct Format") && bLabel.getText().equals("Correct Overall Format") && name.getText().length() > 0 && add.getText().length() > 0 && num.getText().length() > 0 && nLabel.getText().equals("Correct Format")){
                MsgBox("Successfully Updated", "Message!");
                String[] item = {id.getText(), name.getText(), add.getText(), num.getText(),email.getText(),bday.getText(), gender.getSelectedItem().toString()};
    //                costumer[indxRow] = item;
                jTable1.setValueAt(name.getText(),indxRow,1);
                jTable1.setValueAt(add.getText(),indxRow,2);
                jTable1.setValueAt(num.getText(),indxRow,3);
                jTable1.setValueAt(email.getText(),indxRow,4);
                jTable1.setValueAt(bday.getText(),indxRow,5);
                jTable1.setValueAt(gender.getSelectedItem().toString(),indxRow,6);
    //                Cust[indxRow] = item;
                Cust.set(indxRow, item);
                Custwritecsv();
                  
            }else{
                MsgBox("There are Wrong inputs\nUpdate was Unsuccessfull", "Message!");
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (jTable1.getSelectionModel().isSelectionEmpty()){
            MsgBox("Please Select a row", "Message!");
        }else{
//        costumer[indxRow] = null;
        deleted.add(Integer.parseInt(jTable1.getModel().getValueAt(indxRow, 0).toString()));
        DefaultTableModel tblmodel = (DefaultTableModel) jTable1.getModel();
        tblmodel.removeRow(indxRow);
        jTable1.clearSelection();
        Collections.sort(deleted);
        id.setText(Integer.toString(deleted.get(0)));
        Cust.remove(indxRow);
        CustProd.remove(indxRow);
        System.out.println(Arrays.deepToString(CustProd.toArray()));
        Custwritecsv();
        CustProdwritecsv();
        Deletedwritecsv();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable4MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable4MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        boolean enter = false;
        int num = 0;
        if (jTable1.getSelectionModel().isSelectionEmpty()){
            MsgBox("Please select a row from the Customer Table", "Message!");
        }else{
//            ProdClass.AddOrder();
            String [][] checkSame = new String[10][2];
//            for (String []x: CustProd.get(indxRow)){
//                checkSame
//            }
            String [] initialArr = ProdClass.GetProdArr();
            if (initialArr[0] != null){
                for (String[] x: CustProd.get(indxRow)){
//                    System.out.println(Arrays.deepToString(Arrays.copyOfRange(x, 2, 4)));
                    if (Arrays.equals(Arrays.copyOfRange(x, 2, 4), Arrays.copyOfRange(initialArr, 0, 2))){
                        enter = true;
                        break;
                    }
                    num++;
                }            
                if (enter == true){
                    CustProd.get(indxRow)[num][4] = Integer.toString(Integer.parseInt(CustProd.get(indxRow)[num][4])+1);
                }else{
//                    String [] item = {
//                        Integer.toString(CustProdInvoice[indxRow]),
//                        Integer.toString(CustProdID[indxRow]+1),
//                        initialArr[0],
//                        initialArr[1],
//                        "1",
//                        initialArr[2],
//                        Currdate.toString(),
//                        initialArr[0],
//                        initialArr[1]
//                    };
                    CustProd.get(indxRow)[CustProdID[indxRow]][0] = Integer.toString(CustProdInvoice[indxRow]);
                    CustProd.get(indxRow)[CustProdID[indxRow]][1] = Integer.toString(CustProdID[indxRow]+1); 
                    CustProd.get(indxRow)[CustProdID[indxRow]][2] = initialArr[0];
                    CustProd.get(indxRow)[CustProdID[indxRow]][3] = initialArr[1];
                    CustProd.get(indxRow)[CustProdID[indxRow]][4] = "1";
                    CustProd.get(indxRow)[CustProdID[indxRow]][5] = initialArr[2];
                    CustProd.get(indxRow)[CustProdID[indxRow]][6] = Currdate.toString();
//                    checkSame[indxRow][CustProdID[indxRow]][0] = initialArr[0];
//                    checkSame[indxRow][CustProdID[indxRow]][1] = initialArr[1];
                    CustProdID[indxRow]++;
//                    System.out.print("checkSame = " + Arrays.deepToString(checkSame));
                }
                String[][][] convert = new String[CustProd.size()][10][7];
                CustProd.toArray(convert);
                makeCustProdTable(convert[indxRow]);
                CustProdwritecsv();
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        Document doc = new Document();
        PdfWriter docWriter = null;
        
        try{
            Font textInvoice = new Font(Font.FontFamily.HELVETICA, 30, Font.BOLD, new BaseColor(0, 0, 0));
            Font textBilledTo = new Font(Font.FontFamily.HELVETICA, 17, Font.BOLD, new BaseColor(0, 0, 0));
            Font textBold12 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD, new BaseColor(0, 0, 0));
            Font text12 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, new BaseColor(0, 0, 0));
            docWriter = PdfWriter.getInstance(doc, new FileOutputStream("Receipt.pdf"));
            doc.open();
//            float[] columnWidths = {30f, 30f, 30f};
            float[] columnWidths = {22.5f, 22.5f, 22.5f, 22.5f};
            
            PdfPTable texts = new PdfPTable(columnWidths);
            
            PdfPTable texts2 = new PdfPTable(columnWidths);
            
            
            Paragraph paragraph = new Paragraph();
            
            createcell(texts, "Date Issued: " + Currdate, Element.ALIGN_RIGHT, 4, text12, 0, 255, 255, 255);       
            createcell(texts, "Invoice No. " + CustProdInvoice[indxRow], Element.ALIGN_RIGHT, 4, text12, 0, 255, 255, 255);
            createcell(texts, "Customer No. " + Integer.toString(indxRow + 1), Element.ALIGN_RIGHT, 4, text12, 0, 255, 255, 255);
            
            createcell(texts, "INVOICE", Element.ALIGN_CENTER, 4, textInvoice, 0, 255, 255, 255);
            createcell(texts, "Viver's Computer Store", Element.ALIGN_CENTER, 4, textBold12, 0, 255, 255, 255);
            createcell(texts, "Magallanes St.", Element.ALIGN_CENTER, 4, text12, 0, 255, 255, 255);
            createcell(texts, "Davao City", Element.ALIGN_CENTER, 4, text12, 0, 255, 255, 255);
            createcell(texts, "Contact#: 09273173194", Element.ALIGN_CENTER, 4, text12, 0, 255, 255, 255);
            
            createcell(texts, "_____________________________________________________________________________", Element.ALIGN_CENTER, 4, text12, 0, 255, 255, 255);
            
            createcell(texts, "Billed To", Element.ALIGN_LEFT, 4, textBilledTo, 0, 255, 255, 255);     
            createSpace(texts);
            
            createcell(texts, Cust.get(indxRow)[1], Element.ALIGN_LEFT, 4, text12, 0, 255, 255, 255);           
            
            createcell(texts, Cust.get(indxRow)[2], Element.ALIGN_LEFT, 4, text12, 0, 255, 255, 255);
            
            createcell(texts, Cust.get(indxRow)[3], Element.ALIGN_LEFT, 4, text12, 0, 255, 255, 255);
            
            createSpace(texts);
            
            createcell(texts, "Product Description", Element.ALIGN_CENTER, 2, text12, 0, 179, 179, 179);
            createcell(texts, "Quantity", Element.ALIGN_CENTER, 1, text12, 0, 179, 179, 179);
            createcell(texts, "Unit Price", Element.ALIGN_CENTER, 1, text12, 0, 179, 179, 179);
            
            createSpace(texts);
            double totUnitPrice = 0;
            
            for (String[] x: CustProd.get(indxRow)){
                if (x[0] != null){
                    createcell(texts, "(" + x[2] + ")  " + x[3], Element.ALIGN_CENTER, 2, text12, 0, 255, 255, 255);
                    createcell(texts, x[4], Element.ALIGN_CENTER, 1, text12, 0, 255, 255, 255);
                    createcell(texts, x[5], Element.ALIGN_CENTER, 1, text12, 0, 255, 255, 255);
                    createSpace(texts);
                    totUnitPrice += Integer.parseInt(x[5]) * Integer.parseInt(x[4]) ;
                }
            }
            
            createSpace(texts);
            createcell(texts, "_____________________________________________________________________________", Element.ALIGN_CENTER, 4, text12, 0, 255, 255, 255);
            createSpace(texts);
            
            double tax = totUnitPrice * 0.12;
            
            double Total = totUnitPrice + tax;
            
            createcell(texts, "Subtotal", Element.ALIGN_RIGHT, 3, textBold12, 0, 255, 255, 255);
            createcell(texts, String.format("%.2f", totUnitPrice), Element.ALIGN_CENTER, 1, text12, 0, 255, 255, 255);
            createSpace(texts);
            
            createcell(texts, "Tax 12%", Element.ALIGN_RIGHT, 3, textBold12, 0, 255, 255, 255);
            createcell(texts, String.format("%.2f", tax), Element.ALIGN_CENTER, 1, text12, 0, 255, 255, 255);
            createSpace(texts);
            
            createcell(texts, "Total Cost", Element.ALIGN_RIGHT, 3, textBold12, 0, 255, 255, 255);
            createcell(texts, String.format("%.2f", Total), Element.ALIGN_CENTER, 1, text12, 0, 255, 255, 255);
            
            texts.setWidthPercentage(90f);
            
            paragraph.add(texts);
            doc.add(paragraph);
        }
        catch(Exception ex){
            System.out.println("Can't create PDF");
        }
        if (doc != null){
            doc.close();
        }
        
        if (docWriter != null){
            docWriter.close();
        }
        
        try{
            Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler " + "Receipt.pdf");
        }
        catch(Exception ex){
            
        }
    }//GEN-LAST:event_jButton5ActionPerformed
    
    public void createcell(PdfPTable table, String text, int align, int colspan, Font font, int border, int r, int g, int b){
        PdfPCell cell = new PdfPCell(new Phrase(text.trim(), font));
        cell.setHorizontalAlignment(align);
        cell.setColspan(colspan);
        if (border == 0){
            cell.setBorder(Rectangle.NO_BORDER);
        }
        else{
            cell.setBorder(Rectangle.BOX);
        }
        cell.setBackgroundColor(new BaseColor(r, g, b));
        table.addCell(cell);
    }
    
    public void createSpace(PdfPTable table){
        PdfPCell cell = new PdfPCell();
        cell.setColspan(4);
        cell.setMinimumHeight(15f);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
    }
    private void MsgBox(String infoMessage, String titleBar){
        JOptionPane.showMessageDialog(null, infoMessage, titleBar, JOptionPane.INFORMATION_MESSAGE);
    }
    
    public void makeCustProdTable(String[][] Arr){
        DefaultTableModel tblmodel4 = (DefaultTableModel) jTable4.getModel();
        tblmodel4.setRowCount(0);
        for (String[] x : Arr){
            if (x[0] != null){
                tblmodel4.addRow(x);
            }
        }
    }
    public void makeCustTable(String[][] Arr){
        DefaultTableModel tblmodel1 = (DefaultTableModel) jTable1.getModel();
        tblmodel1.setRowCount(0);
        for (String[] x : Arr){
            if (x[0] != null){
                tblmodel1.addRow(x);
            }
        }
    }
    

    public void Custwritecsv(){
        try{
            BufferedWriter br = new BufferedWriter(new FileWriter("customers.csv"));
            StringBuilder sb = new StringBuilder();
            for (int x = 0; x < Cust.size(); x++){
                for (int y = 0; y < Cust.get(0).length; y++){
                    if (Cust.get(x)[y] != null){
                        sb.append(Cust.get(x)[y]);
                        sb.append("~");
                    }
                }
                sb.append("-");
            
            }
            br.write(sb.toString());
            br.close();
        } 
        catch(Exception ex){
            
        }
    }
    
    public void Custreadcsv(){
        String[] fromfile = {};
        try{
            BufferedReader br = new BufferedReader(new FileReader("customers.csv"));
            String line;
            
            while ((line = br.readLine()) != null){
                fromfile = line.split("-");
            }
//            System.out.println("fromfile = " + Arrays.deepToString(fromfile));
            for (int x = 0; x < fromfile.length; x++){
                if (!"~".equals(fromfile[x].substring(0, 1))){
                    idnum++;
                    CustProd.add(new String[10][7]);
                } 
//                String [] FirstNameComma = fromfile;
                
                Cust.add(fromfile[x].split("~"));
            }
//            System.out.println("ProdArr = " + Arrays.deepToString(ProdArr));
            
            String[][] convert = new String[Cust.size()][7];
            Cust.toArray(convert);
//            System.out.println(Arrays.deepToString(convert));
            makeCustTable(convert);
        }
        catch(Exception ex){
            System.out.println(ex);
        }
    }
    
    public void CustProdwritecsv(){
        try{
//            System.out.println(Arrays.deepToString(StockArr));
            BufferedWriter br = new BufferedWriter(new FileWriter("customersProducts.csv"));
            StringBuilder sb = new StringBuilder();
//            System.out.println("StockArr: " + Arrays.deepToString(StockArr));
            for (int x = 0; x < CustProd.size(); x++){
                for (int y = 0; y < CustProd.get(0).length; y++){
                    for (int z = 0; z < 7; z++){
                        if (CustProd.get(x)[y][z] != null){
//                            System.out.println(StockArr[x][y][z]);
                            sb.append(CustProd.get(x)[y][z]);
                            sb.append(",");
                        }
                    }
                    sb.append("-");  
                }
                sb.append("_");
            }
            
//            System.out.println(sb.toString());
            br.write(sb.toString());
            br.close();
        } 
        catch(Exception ex){
            System.out.println(ex);
        }
    }
    public void CustProdreadcsv(){
        String[] fromfile = {};
        try{
            BufferedReader br = new BufferedReader(new FileReader("customersProducts.csv"));
            String line;
//            System.out.println(br.readLine());
            
            while ((line = br.readLine()) != null){
//                System.out.println(Arrays.toString(br.readLine().split(",")));
                fromfile = line.split("_"); 
//                System.out.println(fromfile.length);
            }
            
//            System.out.println("fromfile = " + Arrays.toString(fromfile));
            String[] Temparr = new String[10];
            for (int x = 0; x < fromfile.length; x++){
//                if (!"-".equals(fromfile[x].substring(0, 1))){
//                }
                Temparr = fromfile[x].split("-");
//                System.out.println("Temparr = " + Arrays.toString(Temparr));
                for (int y = 0; y < Temparr.length; y++){
                    if (!",".equals(Temparr[y].substring(0, 1))){
                    CustProdID[x]++;
                    }
//                    System.out.println(Arrays.deepToString(Temparr));
                    CustProd.get(x)[y] = Temparr[y].split(",");
                }
            }
            String[][][] convert = new String[CustProd.size()][10][7];
            CustProd.toArray(convert);
            makeCustProdTable(convert[0]);
            jTable4.setRowSelectionInterval(0, 0);
//            System.out.println(Arrays.deepToString(CustProd.toArray()));
        }
        catch(Exception ex){
            System.out.println(ex);
        }
        
    }
     public void Deletedwritecsv(){
        try{
//            System.out.println(Arrays.deepToString(StockArr));
            BufferedWriter br = new BufferedWriter(new FileWriter("deleted.csv"));
            StringBuilder sb = new StringBuilder();
            for (int x = 0; x < deleted.size(); x++){
                sb.append(deleted.get(x));
                sb.append(",");
            }
            br.write(sb.toString());
            br.close();
        } 
        catch(Exception ex){
//            System.out.println(ex);
        }
    }
    public void Deletedreadcsv(){
        String[] fromfile = {};
        try{
            BufferedReader br = new BufferedReader(new FileReader("deleted.csv"));
            String line;
//            System.out.println(br.readLine());
            
            while ((line = br.readLine()) != null){
//                System.out.println(Arrays.toString(br.readLine().split(",")));
                fromfile = line.split(",");
            }
            for (String x:fromfile){
                deleted.add(Integer.parseInt(x));
            }
        }
        catch(Exception ex){
//            System.out.println(ex);
        }
    }    
    
//    public void setZero(){
//        for (int[] x: CustProdQuant){
//            Arrays.fill(x, 1);
//        }
//        System.out.println(Arrays.deepToString(CustProdQuant));
//    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CostumerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CostumerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CostumerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CostumerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CostumerForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField add;
    private javax.swing.JLabel bLabel;
    private javax.swing.JTextField bday;
    private javax.swing.JLabel eLabel;
    private javax.swing.JTextField email;
    private javax.swing.JComboBox gender;
    private javax.swing.JTextField id;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable4;
    private javax.swing.JLabel nLabel;
    private javax.swing.JTextField name;
    private javax.swing.JTextField num;
    // End of variables declaration//GEN-END:variables
}
